<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SQLDataStore</name>
    </assembly>
    <members>
        <member name="T:SQLDataStore.DataOperator">
            <summary>
            
            </summary>
            <seealso cref="T:DataInterface.IDataOperator" />
            <seealso cref="T:DataInterface.IDataReadOnlyOperator" />
            <seealso cref="T:DataInterface.IDataWriterOperator" />
        </member>
        <member name="M:SQLDataStore.DataOperator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SQLDataStore.DataOperator"/> class.
            
            </summary>
        </member>
        <member name="M:SQLDataStore.DataOperator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SQLDataStore.DataOperator"/> class.
            </summary>
            <param name="source">The source.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:SQLDataStore.DataOperator.#ctor(Encryptor.IAesEncryptor,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SQLDataStore.DataOperator"/> class.
            </summary>
            <param name="Encryptor">The encryptor.</param>
            <param name="source">The source.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="P:SQLDataStore.DataOperator.Source">
            <summary>
            .Gets or sets the context source.It can be a connection string, a filepath,a url
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="E:SQLDataStore.DataOperator.RecordInserted">
            <summary>
            Occurs when [record inserted].
            </summary>
        </member>
        <member name="M:SQLDataStore.DataOperator.OnRecordInserted(DataInterface.OperatorEventArguments)">
            <summary>
            Raises the <see cref="E:RecordInserted" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:SQLDataStore.DataOperator.RecordInsertFailed">
            <summary>
            Occurs when [record insert failed].
            </summary>
        </member>
        <member name="E:SQLDataStore.DataOperator.BeforeInsert">
            <summary>
            Occurs when [before insert].
            </summary>
        </member>
        <member name="M:SQLDataStore.DataOperator.OnRecordInsertFailed(DataInterface.OperatorEventArguments)">
            <summary>
            Raises the <see cref="E:RecordInsertFailed" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SQLDataStore.DataOperator.OnBeforeInsert(DataInterface.OperatorEventArguments)">
            <summary>
            Raises the <see cref="E:BeforeInsert" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:SQLDataStore.DataOperator.AddRecord(DataInterface.IDataEntity)">
            <summary>
            Adds the record to the datasource.
            If there is not a "Field" attribute on a property then the property is maped to the datasource 
            with it's name.
            If a property is marked as EntityKey then the property will take the Identity value after the insert
            If there is a Table attribute on the Entity then the entity is mapped to the specified Datasource table otherwise is mapped with it's name.
            If an encryptor instance is available the properties marked as MuStEncrypt are encrypted before insert and decrypted after the insert
            </summary>
            <param name="Record">The record.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SQLDataStore.DataOperator.UpdateKeyPropery(DataInterface.IDataEntity,System.Collections.Generic.List{System.Reflection.PropertyInfo},System.Int32)">
            <summary>
            Updates the key propery.
            </summary>
            <param name="Record">The record.</param>
            <param name="properties">The properties.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:SQLDataStore.DataOperator.SetInsetParameters(DataInterface.IDataEntity,System.Collections.Generic.List{System.Reflection.PropertyInfo},System.Collections.Generic.Dictionary{System.String,System.String},System.Data.SqlClient.SqlCommand)">
            <summary>
            Sets the inset parameters.
            </summary>
            <param name="Record">The record.</param>
            <param name="properties">The properties.</param>
            <param name="FieldsNames">The fields names.</param>
            <param name="com">The COM.</param>
        </member>
        <member name="M:SQLDataStore.DataOperator.AddRecord_Async(DataInterface.IDataEntity)">
            <summary>
            Adds the record asynchronous.
            If there is not a "Field" attribute on a property then the property is maped to the datasource 
            with it's name.
            If a property is marked as EntityKey then the property will take the Identity value after the insert
            If there is a Table attribute on the Entity then the entity is mapped to the specified Datasource table otherwise is mapped with it's name.
            If an encryptor instance is available the properties marked as MuStEncrypt are encrypted before insert and decrypted after the insert
            </summary>
            <param name="Record">The record.</param>
            <returns></returns>
        </member>
        <member name="M:SQLDataStore.DataOperator.UpdateRecordAsync(DataInterface.IDataEntity)">
            <summary>
            Updates the record asynchronous.
              If there is a property marked as EntityKey the update will consider that field as Unique Key    
             If there is not any property marked as EntityKey the function will throw an exception
            </summary>
            <param name="record">The record.</param>
            <returns></returns>
            <exception cref="T:System.Exception">
            There is not any property marked as EntityKey
            or
            A Class marked with attribute NotInsert cannot perform write opperations
            </exception>
        </member>
        <member name="M:SQLDataStore.DataOperator.UpdateRecord(DataInterface.IDataEntity)">
            <summary>
            Updates the record.
              If there is a property marked as EntityKey the update will consider that field as Unique Key    
             If there is not any property marked as EntityKey the function will throw an exception
            </summary>
            <param name="record">The record.</param>
            <returns></returns>
            <exception cref="T:System.Exception">
            There is not any property marked as EntityKey
            or
            A Class marked with attribute NotInsert cannot perform write opperations
            </exception>
        </member>
        <member name="M:SQLDataStore.DataOperator.GetRecords``1(DataInterface.Base.RequestFilters,DataInterface.Base.DataOrder,System.Int32,System.Int32)">
            <summary>
            Gets the records.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filters">The filters.</param>
            <param name="Order">The order.</param>
            <param name="PageSize">Size of the page.</param>
            <param name="Page">The page.</param>
            <returns></returns>
        </member>
        <member name="M:SQLDataStore.DataOperator.GetRecords_Async``1(DataInterface.Base.RequestFilters,DataInterface.Base.DataOrder,System.Int32,System.Int32)">
            <summary>
            Gets the records asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filters">The filters.</param>
            <param name="Order">The order.</param>
            <param name="PageSize"></param>
            <param name="Page"></param>
            <returns></returns>
        </member>
        <member name="M:SQLDataStore.DataOperator.GetByEntityKey``1(System.String,System.String)">
            <summary>
            Gets a collection of entitiews by Entity Key value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Key">The key.</param>
            <param name="ValueOfKey">The value of key.</param>
            <returns></returns>
        </member>
        <member name="M:SQLDataStore.DataOperator.GetByEntityKey_Async``1(System.String,System.String)">
            <summary>
            Gets a collection of entitiews by Entity Key value. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Key">The key.</param>
            <param name="ValueOfKey">The value of key.</param>
            <returns></returns>
            <exception cref="T:System.Exception">There is not any property marked as EntityKey</exception>
        </member>
    </members>
</doc>
